Here’s a draft Developer Guide for your team’s GitHub repository structure and development practices, based on your requirements. I’ve structured it cleanly so it can be turned into a markdown document (README.md or DEVELOPER_GUIDE.md) and version-controlled in your repository.

⸻

📘 Developer Guide – GitHub Repository Standards for EAI Projects

📁 Repository Structure

Each repository should follow a standardized modular structure based on the type of project.

For PAP Repositories

The repository must contain:
	•	A Base POM (pom.xml) at the root level – serves as the central point for shared configurations.
	•	Multiple sub-modules, each representing a specific project within the repository.

Sub-module Types
	•	ace-application – ACE flows and integration logic
	•	java-project – Java-based components or microservices
	•	message-set-project – IBM Integration Bus (IIB) message sets
	•	library-project – Shared utility libraries
	•	database-project – DB scripts and configurations
	•	testcase-project – Unit, integration, and regression test cases

🔁 All project modules must have their own individual POMs and be declared as modules in the base POM.

For ITX Repositories
	•	The repository itself is the project.
	•	It contains a single POM file with a parent pointing to a custom parent POM.

⸻

⚙️ POM File Structure

Base POM (Root pom.xml)
	•	Must have this as the parent:

<parent>
  <groupId>com.org.eai</groupId>
  <artifactId>EAI-parent-pom</artifactId>
  <version>latest</version> <!-- Replace with actual latest version -->
</parent>


	•	Declare all submodules under the <modules> tag.

Submodule POM (e.g., ace-application/pom.xml)
	•	Must inherit from a project-specific parent POM, depending on the type:
	•	ACE → ace-parent-pom
	•	Java → java-parent-pom
	•	etc.

Example:

<parent>
  <groupId>com.org.eai</groupId>
  <artifactId>ace-parent-pom</artifactId>
  <version>latest</version>
</parent>

Dependencies
	•	Common dependencies (e.g., logging, testing, spring) are managed via the parent POM.
	•	To add a new dependency:
	•	Ensure it’s not already covered by the parent.
	•	Use the latest stable version.

⸻

🔍 Dependency & Parent POM Version Management

Check the latest version of a dependency:

mvn versions:display-dependency-updates

Check the latest version of the parent POM:

mvn versions:display-plugin-updates

📌 Refer to the EAI Parent POM repository for version history and dependency coverage.

⸻

🔄 Versioning Strategy

Versioning is crucial for build and deployment integrity.

General Rules
	•	Keep all POMs in sync with the same version.
	•	Versions should always be -SNAPSHOT during development.
	•	Do not manually create release versions (x.y.z). These are generated automatically during the UAT or Prod deployment pipeline.

When to Update Versions

Scenario	Version Action
Fix	No change needed (continue using current x.y-SNAPSHOT)
Feature or Release	Bump to new major/minor x+1.0-SNAPSHOT or x.y+1-SNAPSHOT

Example: If current version is 1.1-SNAPSHOT, and you’re developing a major feature, bump it to 2.0-SNAPSHOT.

⸻

🌿 Branching Strategy
	•	Start by creating a new branch from main.
	•	main will always reflect the latest snapshot version.
	•	All development branches should work against that snapshot.

git checkout -b feature/your-feature-name main


⸻

🧪 CI/CD – Jenkins Integration
	•	Every repository must contain a Jenkinsfile at the root.
	•	The pipeline will:
	•	Build all modules
	•	Run tests
	•	Validate POM versions
	•	Package artifacts
	•	Deploy to artifact repository if release is triggered

⸻

📌 Summary Checklist

Requirement	Description
✅ Base POM	Exists with EAI-parent-pom
✅ Module POMs	Exist for all subprojects with correct parent
✅ Jenkinsfile	Present in root
✅ Versioning	Synced across all POMs, using -SNAPSHOT
✅ Dependencies	Latest versions, not redundant with parent
✅ Branching	From main, follow versioning rules
✅ ITX Projects	POM in root, project structure self-contained


⸻Great — here is the next section of your Developer Guide, covering what happens after development is complete and the proper flow to promote code to the TEST and UAT environments. It’s structured for easy inclusion in your documentation.

⸻

🚀 Post-Development Workflow – Moving Code to TEST & UAT

Once development is complete, follow these steps to push changes, run builds, initiate code review, and promote to higher environments.

⸻

✅ Step 1: Commit & Push Your Changes
	1.	Commit your changes locally with meaningful messages:

git add .
git commit -m "Implemented feature X - refactored Y"

You can commit multiple times to track your progress clearly.

	2.	Push to your feature branch:

git push origin feature/your-feature-name


	3.	This push will trigger the Jenkins pipeline automatically.
	•	Jenkins will validate, build, and deploy the current snapshot to the TEST environment.
	•	You can track the Jenkins job in your build dashboard.

⸻

🔁 Step 2: Create a Pull Request (PR) for UAT Readiness

Once development is done and testing on TEST is successful:
	1.	Go to your GitHub repository and click “New Pull Request”.
	2.	Base branch should be main; compare branch should be your feature branch.
	3.	Title of the PR must be the Jira task only, e.g.:

JIRA-1234


	4.	Creating the pull request will:
	•	Trigger another Jenkins build.
	•	Validate, build, and deploy the code to UAT.
	•	Prepare the code for source review.

📎 How to create a pull request: GitHub PR Docs

🚫 Do not proceed to review if the Jenkins build fails. The code must pass CI checks before it is reviewed or merged.

⸻

🔍 Step 3: Source Code Review

Once the PR build is successful:
	1.	Assign a reviewer.
	2.	Reviewers should verify:
	•	Code quality
	•	Compliance with standards
	•	Test coverage
	3.	Upon approval, you’re cleared to merge.

📎 How to review code on GitHub: GitHub Review Docs

⸻

🔀 Merging Code to Main (UAT Deployment)

⚠️ Only merge when the UAT environment is ready to receive the update.

	1.	Merge the pull request into the main branch from GitHub.
	2.	After merging:
	•	The feature branch can be deleted safely.
	•	GitHub UI usually prompts you to delete it.

📎 How to merge code on GitHub: GitHub Merging Docs

⸻

🚢 Automated Actions on Merge

Merging to main will trigger:
	•	Final Jenkins pipeline execution
	•	Creation of a release version (removal of -SNAPSHOT)
	•	Git tag creation with the release version
	•	Deployment to UAT environment
	•	Upload of release package to Nexus Production repository

📦 Nexus Prod Repo URL (replace with actual link):
https://nexus.company.com/repository/eai-releases/

Here’s a concise yet clear section you can include in your developer guide explaining the purpose of the Jenkinsfile, the pipeline setup, and parameter usage:

⸻

🛠️ Jenkinsfile – Purpose and Usage

Every repository must include a Jenkinsfile at the root. This file defines the CI/CD pipeline used by Jenkins to automate:
	•	Build validation
	•	Code quality checks
	•	Unit and integration testing
	•	Artifact packaging
	•	Deployment to TEST, UAT, and Production environments
	•	Versioning and tagging of releases

🔗 Jenkins Pipeline Library

The Jenkinsfile uses a shared scripted pipeline library managed centrally for all EAI projects. This library contains reusable pipeline logic that ensures consistency across builds and reduces the need to rewrite logic for each project.

📦 Shared library is typically configured in Jenkins globally under shared_lib.

⸻

🧩 Pipeline Parameters

Your Jenkinsfile must define specific parameters to pass metadata and control execution logic. Below are key parameters and guidelines:

Parameter	Type	Required	Description
pap	String	✅ Yes	Mandatory. Represents the name of the PAP project (base repository name).
ace, java, msgset, library, db, testcase	String or List<String>	Optional	Pass the module names as a string or list (for multiple projects of the same type).
shared_lib	List<String>	Optional	For repositories without any properties override, pass as an empty list: shared_lib: [].

Example usage in Jenkinsfile:

eai_pipeline(
  pap: 'my-pap-project',
  ace: ['flow1', 'flow2'],
  java: 'my-java-service',
  shared_lib: []
)

📝 Notes
	•	If a specific project type (e.g., msgset, db, etc.) is not applicable, simply omit the parameter.
	•	Always ensure pap is passed – it’s used for environment-specific settings, versioning, and tagging.
	•	For repositories with no overrides or properties, shared_lib must still be declared as an empty list.

⸻







